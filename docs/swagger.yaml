basePath: /api/v1
definitions:
  handlers.ChangePasswordRequest:
    properties:
      currentPassword:
        example: oldpassword123
        type: string
      newPassword:
        example: newpassword123
        minLength: 8
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  handlers.ChangeRoleRequest:
    properties:
      role:
        enum:
        - user
        - admin
        example: admin
        type: string
    required:
    - role
    type: object
  handlers.LoginRequest:
    properties:
      login:
        description: email or username
        example: user@example.com
        type: string
      password:
        example: strongpassword123
        type: string
    required:
    - login
    - password
    type: object
  handlers.LogoutRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  handlers.ProfileResponse:
    properties:
      avatarURL:
        example: https://example.com/avatar.jpg
        type: string
      bio:
        example: Software Developer
        type: string
      firstName:
        example: John
        type: string
      lastName:
        example: Doe
        type: string
    type: object
  handlers.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: strongpassword123
        minLength: 8
        type: string
      username:
        example: johndoe
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.TokenPairResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.UpdateProfileRequest:
    properties:
      avatarURL:
        example: https://example.com/avatar.jpg
        type: string
      bio:
        example: Software Developer
        type: string
      firstName:
        example: John
        type: string
      lastName:
        example: Doe
        type: string
    type: object
  handlers.UserProfileResponse:
    properties:
      profile:
        $ref: '#/definitions/handlers.ProfileResponse'
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.UserResponse:
    properties:
      email:
        example: user@example.com
        type: string
      id:
        example: 1
        type: integer
      role:
        example: user
        type: string
      username:
        example: johndoe
        type: string
    type: object
  handlers.UserRoleResponse:
    properties:
      message:
        example: User role updated successfully
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.UsersListResponse:
    properties:
      users:
        items:
          properties:
            createdAt:
              example: "2025-08-04T12:00:00Z"
              type: string
            email:
              example: user@example.com
              type: string
            id:
              example: 1
              type: integer
            profile:
              properties:
                firstName:
                  example: John
                  type: string
                lastName:
                  example: Doe
                  type: string
              type: object
            role:
              example: user
              type: string
            username:
              example: johndoe
              type: string
            verified:
              example: true
              type: boolean
          type: object
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A complete RESTful API for user management with authentication, authorization,
    and logging.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: User Management API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UsersListResponse'
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden - Admin access required'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: List all users
      tags:
      - admin
  /admin/users/{id}/role:
    put:
      consumes:
      - application/json
      description: Change the role of a specific user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: New Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangeRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserRoleResponse'
        "400":
          description: 'error: Validation error'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Forbidden - Admin access required'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Change user role
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email/username and password
      parameters:
      - description: Login Credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns access_token, refresh_token and user details
          schema:
            $ref: '#/definitions/handlers.TokenResponse'
        "400":
          description: 'error: Validation error message'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Invalid credentials'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error message'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the refresh token and logout the user
      parameters:
      - description: Refresh Token
        in: body
        name: logout
        required: true
        schema:
          $ref: '#/definitions/handlers.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Successfully logged out'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Validation error message'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error message'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TokenPairResponse'
        "400":
          description: 'error: Validation error message'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Invalid refresh token'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error message'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, username and password
      parameters:
      - description: Registration Details
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: Registration successful'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Validation error message'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: 'error: Email or username already exists'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error message'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /users/account:
    delete:
      consumes:
      - application/json
      description: Soft delete the authenticated user's account
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Account deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete user account
      tags:
      - users
  /users/change-password:
    put:
      consumes:
      - application/json
      description: Change the password of the authenticated user
      parameters:
      - description: Password Information
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Password changed successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Validation error'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Current password is incorrect'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserProfileResponse'
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile information of the authenticated user
      parameters:
      - description: Profile Information
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProfileResponse'
        "400":
          description: 'error: Validation error'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update user profile
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
